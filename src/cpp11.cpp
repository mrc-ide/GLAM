// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// main.cpp
list mcmc_cpp(cpp11::list data_list, cpp11::list obs_time_list, const doubles obs_time_start, const doubles obs_time_end, const doubles haplo_freqs, const int iterations, const bool burnin, list param_list, list param_update_list, list proposal_sd, cpp11::function lambda_prior, cpp11::function theta_prior, cpp11::function decay_rate_prior, cpp11::function sens_prior, const int iteration_counter_init, const doubles beta, int max_infections, cpp11::sexp rng_ptr, const bool interactive);
extern "C" SEXP _GLAM_mcmc_cpp(SEXP data_list, SEXP obs_time_list, SEXP obs_time_start, SEXP obs_time_end, SEXP haplo_freqs, SEXP iterations, SEXP burnin, SEXP param_list, SEXP param_update_list, SEXP proposal_sd, SEXP lambda_prior, SEXP theta_prior, SEXP decay_rate_prior, SEXP sens_prior, SEXP iteration_counter_init, SEXP beta, SEXP max_infections, SEXP rng_ptr, SEXP interactive) {
  BEGIN_CPP11
    return cpp11::as_sexp(mcmc_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(data_list), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(obs_time_list), cpp11::as_cpp<cpp11::decay_t<const doubles>>(obs_time_start), cpp11::as_cpp<cpp11::decay_t<const doubles>>(obs_time_end), cpp11::as_cpp<cpp11::decay_t<const doubles>>(haplo_freqs), cpp11::as_cpp<cpp11::decay_t<const int>>(iterations), cpp11::as_cpp<cpp11::decay_t<const bool>>(burnin), cpp11::as_cpp<cpp11::decay_t<list>>(param_list), cpp11::as_cpp<cpp11::decay_t<list>>(param_update_list), cpp11::as_cpp<cpp11::decay_t<list>>(proposal_sd), cpp11::as_cpp<cpp11::decay_t<cpp11::function>>(lambda_prior), cpp11::as_cpp<cpp11::decay_t<cpp11::function>>(theta_prior), cpp11::as_cpp<cpp11::decay_t<cpp11::function>>(decay_rate_prior), cpp11::as_cpp<cpp11::decay_t<cpp11::function>>(sens_prior), cpp11::as_cpp<cpp11::decay_t<const int>>(iteration_counter_init), cpp11::as_cpp<cpp11::decay_t<const doubles>>(beta), cpp11::as_cpp<cpp11::decay_t<int>>(max_infections), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(rng_ptr), cpp11::as_cpp<cpp11::decay_t<const bool>>(interactive)));
  END_CPP11
}
// main.cpp
void debug_algo1_cpp(cpp11::list data_list, cpp11::list obs_time_list, const doubles obs_time_start, const doubles obs_time_end, const doubles haplo_freqs, list param_list, list param_update_list, list proposal_sd, cpp11::function lambda_prior, cpp11::function theta_prior, cpp11::function decay_rate_prior, cpp11::function sens_prior, const doubles beta, int max_infections, cpp11::sexp rng_ptr);
extern "C" SEXP _GLAM_debug_algo1_cpp(SEXP data_list, SEXP obs_time_list, SEXP obs_time_start, SEXP obs_time_end, SEXP haplo_freqs, SEXP param_list, SEXP param_update_list, SEXP proposal_sd, SEXP lambda_prior, SEXP theta_prior, SEXP decay_rate_prior, SEXP sens_prior, SEXP beta, SEXP max_infections, SEXP rng_ptr) {
  BEGIN_CPP11
    debug_algo1_cpp(cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(data_list), cpp11::as_cpp<cpp11::decay_t<cpp11::list>>(obs_time_list), cpp11::as_cpp<cpp11::decay_t<const doubles>>(obs_time_start), cpp11::as_cpp<cpp11::decay_t<const doubles>>(obs_time_end), cpp11::as_cpp<cpp11::decay_t<const doubles>>(haplo_freqs), cpp11::as_cpp<cpp11::decay_t<list>>(param_list), cpp11::as_cpp<cpp11::decay_t<list>>(param_update_list), cpp11::as_cpp<cpp11::decay_t<list>>(proposal_sd), cpp11::as_cpp<cpp11::decay_t<cpp11::function>>(lambda_prior), cpp11::as_cpp<cpp11::decay_t<cpp11::function>>(theta_prior), cpp11::as_cpp<cpp11::decay_t<cpp11::function>>(decay_rate_prior), cpp11::as_cpp<cpp11::decay_t<cpp11::function>>(sens_prior), cpp11::as_cpp<cpp11::decay_t<const doubles>>(beta), cpp11::as_cpp<cpp11::decay_t<int>>(max_infections), cpp11::as_cpp<cpp11::decay_t<cpp11::sexp>>(rng_ptr));
    return R_NilValue;
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_GLAM_debug_algo1_cpp", (DL_FUNC) &_GLAM_debug_algo1_cpp, 15},
    {"_GLAM_mcmc_cpp",        (DL_FUNC) &_GLAM_mcmc_cpp,        19},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_GLAM(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
